/**
 * @fileoverview gRPC-Web generated client stub for todo
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.1
// source: todo.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as todo_pb from './todo_pb'; // proto import: "todo.proto"


export class TodoServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateTodo = new grpcWeb.MethodDescriptor(
    '/todo.TodoService/CreateTodo',
    grpcWeb.MethodType.UNARY,
    todo_pb.CreateTodoRequest,
    todo_pb.TodoResponse,
    (request: todo_pb.CreateTodoRequest) => {
      return request.serializeBinary();
    },
    todo_pb.TodoResponse.deserializeBinary
  );

  createTodo(
    request: todo_pb.CreateTodoRequest,
    metadata?: grpcWeb.Metadata | null): Promise<todo_pb.TodoResponse>;

  createTodo(
    request: todo_pb.CreateTodoRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: todo_pb.TodoResponse) => void): grpcWeb.ClientReadableStream<todo_pb.TodoResponse>;

  createTodo(
    request: todo_pb.CreateTodoRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: todo_pb.TodoResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/todo.TodoService/CreateTodo',
        request,
        metadata || {},
        this.methodDescriptorCreateTodo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/todo.TodoService/CreateTodo',
    request,
    metadata || {},
    this.methodDescriptorCreateTodo);
  }

  methodDescriptorGetTodos = new grpcWeb.MethodDescriptor(
    '/todo.TodoService/GetTodos',
    grpcWeb.MethodType.UNARY,
    todo_pb.GetTodosRequest,
    todo_pb.TodosResponse,
    (request: todo_pb.GetTodosRequest) => {
      return request.serializeBinary();
    },
    todo_pb.TodosResponse.deserializeBinary
  );

  getTodos(
    request: todo_pb.GetTodosRequest,
    metadata?: grpcWeb.Metadata | null): Promise<todo_pb.TodosResponse>;

  getTodos(
    request: todo_pb.GetTodosRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: todo_pb.TodosResponse) => void): grpcWeb.ClientReadableStream<todo_pb.TodosResponse>;

  getTodos(
    request: todo_pb.GetTodosRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: todo_pb.TodosResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/todo.TodoService/GetTodos',
        request,
        metadata || {},
        this.methodDescriptorGetTodos,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/todo.TodoService/GetTodos',
    request,
    metadata || {},
    this.methodDescriptorGetTodos);
  }

  methodDescriptorGetTodo = new grpcWeb.MethodDescriptor(
    '/todo.TodoService/GetTodo',
    grpcWeb.MethodType.UNARY,
    todo_pb.GetTodoRequest,
    todo_pb.TodoResponse,
    (request: todo_pb.GetTodoRequest) => {
      return request.serializeBinary();
    },
    todo_pb.TodoResponse.deserializeBinary
  );

  getTodo(
    request: todo_pb.GetTodoRequest,
    metadata?: grpcWeb.Metadata | null): Promise<todo_pb.TodoResponse>;

  getTodo(
    request: todo_pb.GetTodoRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: todo_pb.TodoResponse) => void): grpcWeb.ClientReadableStream<todo_pb.TodoResponse>;

  getTodo(
    request: todo_pb.GetTodoRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: todo_pb.TodoResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/todo.TodoService/GetTodo',
        request,
        metadata || {},
        this.methodDescriptorGetTodo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/todo.TodoService/GetTodo',
    request,
    metadata || {},
    this.methodDescriptorGetTodo);
  }

  methodDescriptorUpdateTodo = new grpcWeb.MethodDescriptor(
    '/todo.TodoService/UpdateTodo',
    grpcWeb.MethodType.UNARY,
    todo_pb.UpdateTodoRequest,
    todo_pb.TodoResponse,
    (request: todo_pb.UpdateTodoRequest) => {
      return request.serializeBinary();
    },
    todo_pb.TodoResponse.deserializeBinary
  );

  updateTodo(
    request: todo_pb.UpdateTodoRequest,
    metadata?: grpcWeb.Metadata | null): Promise<todo_pb.TodoResponse>;

  updateTodo(
    request: todo_pb.UpdateTodoRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: todo_pb.TodoResponse) => void): grpcWeb.ClientReadableStream<todo_pb.TodoResponse>;

  updateTodo(
    request: todo_pb.UpdateTodoRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: todo_pb.TodoResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/todo.TodoService/UpdateTodo',
        request,
        metadata || {},
        this.methodDescriptorUpdateTodo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/todo.TodoService/UpdateTodo',
    request,
    metadata || {},
    this.methodDescriptorUpdateTodo);
  }

  methodDescriptorDeleteTodo = new grpcWeb.MethodDescriptor(
    '/todo.TodoService/DeleteTodo',
    grpcWeb.MethodType.UNARY,
    todo_pb.DeleteTodoRequest,
    todo_pb.TodoResponse,
    (request: todo_pb.DeleteTodoRequest) => {
      return request.serializeBinary();
    },
    todo_pb.TodoResponse.deserializeBinary
  );

  deleteTodo(
    request: todo_pb.DeleteTodoRequest,
    metadata?: grpcWeb.Metadata | null): Promise<todo_pb.TodoResponse>;

  deleteTodo(
    request: todo_pb.DeleteTodoRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: todo_pb.TodoResponse) => void): grpcWeb.ClientReadableStream<todo_pb.TodoResponse>;

  deleteTodo(
    request: todo_pb.DeleteTodoRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: todo_pb.TodoResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/todo.TodoService/DeleteTodo',
        request,
        metadata || {},
        this.methodDescriptorDeleteTodo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/todo.TodoService/DeleteTodo',
    request,
    metadata || {},
    this.methodDescriptorDeleteTodo);
  }

}

