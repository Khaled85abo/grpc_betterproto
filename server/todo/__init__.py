# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: todo.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    AsyncIterable,
    AsyncIterator,
    Dict,
    Iterable,
    List,
    Optional,
    Union,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class TodoItem(betterproto.Message):
    """A single todo item"""

    id: str = betterproto.string_field(1)
    user_id: str = betterproto.string_field(2)
    text: str = betterproto.string_field(3)
    completed: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class CreateTodoRequest(betterproto.Message):
    """Request to create a todo"""

    user_id: str = betterproto.string_field(1)
    text: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class TodoResponse(betterproto.Message):
    """Response containing a single todo"""

    todo: "TodoItem" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetTodosRequest(betterproto.Message):
    """Request to fetch all todos for a user"""

    user_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetTodoRequest(betterproto.Message):
    """Request to fetch a single todo for a user"""

    user_id: str = betterproto.string_field(1)
    todo_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class TodosResponse(betterproto.Message):
    """Response containing multiple todos"""

    todos: List["TodoItem"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class UpdateTodoRequest(betterproto.Message):
    """Request to update a todo by ID"""

    id: str = betterproto.string_field(1)
    text: str = betterproto.string_field(2)
    completed: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class DeleteTodoRequest(betterproto.Message):
    """Request to delete a todo by ID"""

    id: str = betterproto.string_field(1)


class TodoServiceStub(betterproto.ServiceStub):
    async def create_todo(
        self,
        create_todo_request: "CreateTodoRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "TodoResponse":
        return await self._unary_unary(
            "/todo.TodoService/CreateTodo",
            create_todo_request,
            TodoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_todos(
        self,
        get_todos_request: "GetTodosRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "TodosResponse":
        return await self._unary_unary(
            "/todo.TodoService/GetTodos",
            get_todos_request,
            TodosResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_todo(
        self,
        get_todo_request: "GetTodoRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "TodoResponse":
        return await self._unary_unary(
            "/todo.TodoService/GetTodo",
            get_todo_request,
            TodoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_todo(
        self,
        update_todo_request: "UpdateTodoRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "TodoResponse":
        return await self._unary_unary(
            "/todo.TodoService/UpdateTodo",
            update_todo_request,
            TodoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_todo(
        self,
        delete_todo_request: "DeleteTodoRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "TodoResponse":
        return await self._unary_unary(
            "/todo.TodoService/DeleteTodo",
            delete_todo_request,
            TodoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def stream_todos(
        self,
        get_todos_request_iterator: Union[
            AsyncIterable[GetTodosRequest], Iterable[GetTodosRequest]
        ],
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[TodosResponse]:
        async for response in self._stream_stream(
            "/todo.TodoService/StreamTodos",
            get_todos_request_iterator,
            GetTodosRequest,
            TodosResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class TodoServiceBase(ServiceBase):

    async def create_todo(
        self, create_todo_request: "CreateTodoRequest"
    ) -> "TodoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_todos(self, get_todos_request: "GetTodosRequest") -> "TodosResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_todo(self, get_todo_request: "GetTodoRequest") -> "TodoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_todo(
        self, update_todo_request: "UpdateTodoRequest"
    ) -> "TodoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_todo(
        self, delete_todo_request: "DeleteTodoRequest"
    ) -> "TodoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def stream_todos(
        self, get_todos_request_iterator: AsyncIterator[GetTodosRequest]
    ) -> AsyncIterator[TodosResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield TodosResponse()

    async def __rpc_create_todo(
        self, stream: "grpclib.server.Stream[CreateTodoRequest, TodoResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_todo(request)
        await stream.send_message(response)

    async def __rpc_get_todos(
        self, stream: "grpclib.server.Stream[GetTodosRequest, TodosResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_todos(request)
        await stream.send_message(response)

    async def __rpc_get_todo(
        self, stream: "grpclib.server.Stream[GetTodoRequest, TodoResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_todo(request)
        await stream.send_message(response)

    async def __rpc_update_todo(
        self, stream: "grpclib.server.Stream[UpdateTodoRequest, TodoResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_todo(request)
        await stream.send_message(response)

    async def __rpc_delete_todo(
        self, stream: "grpclib.server.Stream[DeleteTodoRequest, TodoResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_todo(request)
        await stream.send_message(response)

    async def __rpc_stream_todos(
        self, stream: "grpclib.server.Stream[GetTodosRequest, TodosResponse]"
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.stream_todos,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/todo.TodoService/CreateTodo": grpclib.const.Handler(
                self.__rpc_create_todo,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateTodoRequest,
                TodoResponse,
            ),
            "/todo.TodoService/GetTodos": grpclib.const.Handler(
                self.__rpc_get_todos,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetTodosRequest,
                TodosResponse,
            ),
            "/todo.TodoService/GetTodo": grpclib.const.Handler(
                self.__rpc_get_todo,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetTodoRequest,
                TodoResponse,
            ),
            "/todo.TodoService/UpdateTodo": grpclib.const.Handler(
                self.__rpc_update_todo,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateTodoRequest,
                TodoResponse,
            ),
            "/todo.TodoService/DeleteTodo": grpclib.const.Handler(
                self.__rpc_delete_todo,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteTodoRequest,
                TodoResponse,
            ),
            "/todo.TodoService/StreamTodos": grpclib.const.Handler(
                self.__rpc_stream_todos,
                grpclib.const.Cardinality.STREAM_STREAM,
                GetTodosRequest,
                TodosResponse,
            ),
        }
